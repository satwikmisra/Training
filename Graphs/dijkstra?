#include <bits/stdc++.h>

using namespace std;
#define ll long long

const ll MAXN=2e5;
const ll inf=1e18;
ll n, x=1;
vector<pair<ll,ll> > adj[MAXN+1];
ll dist[MAXN+1];
bool visit[MAXN+1];
priority_queue<pair<ll,ll> >q;
ll par[MAXN+1];

void dijkstra(){
    for(int i=0;i<=MAXN;i++){
        dist[i]=inf;
    }
    dist[x]=0;
    q.push(make_pair(0,x));
    while(!q.empty()){
        ll a=q.top().second;  q.pop();
        if(visit[a]) continue;
        visit[a]=true;
        for(int i=0;i<adj[a].size();i++){
            ll b=adj[a][i].first; ll w=adj[a][i].second;
            if(dist[a]+w<dist[b]){
                dist[b]=dist[a]+w;
                par[b]=a;
                q.push(make_pair(-dist[b],b));
            }
        }
    }
}


int main()
{
    ll m; cin>>n>>m;
    for(int i=0;i<m;i++){
        ll a, b, w; cin>>a>>b>>w;
        adj[a].push_back(make_pair(b,w));
        adj[b].push_back(make_pair(a,w));
    }
    dijkstra();
    vector<int>ans;
    if(dist[n]==inf) cout<<-1;
    else{
        int i=n;
        while(i!=1){
            ans.push_back(i);
            i=par[i];
        }
        ans.push_back(1);
        reverse(ans.begin(),ans.end());
        for(int i=0;i<ans.size();i++){
            cout<<ans[i]<<" ";
        }
    }


    return 0;
}
