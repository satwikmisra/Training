#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

int n;
vector<pair<int,int> >pos;
const int MAXSZ=10000;
vector<int> height, euler, first, segtree;
vector<bool>visited;
vector<int> adj[MAXSZ];

void sbuild(int node, int b, int e){
    if(b==e) segtree[node]=euler[b];
    else{
        int mid=(e+b)/2;
        sbuild(node << 1,b,mid);
        sbuild(node << 1 | 1,mid+1,e);
        int l=segtree[node << 1]; int r=segtree[node << 1 | 1];
        segtree[node] = (height[l]<height[r]) ? l : r;
    }
}

int query(int node, int b, int e, int l, int r){
    if(b>r || e<l) return -1;
    if(b>=l && e<=r) return segtree[node];
    int mid = (b+e) >> 1;
    int left=query(node << 1, b, mid, l, r);
    int right=query(node << 1 | 1, mid+1, e, l, r);
    if(left==-1) return right;
    if(right==-1) return left;
    return height[left] < height[right] ? left : right;
}

void dfs(int cur, int h){
    visited[cur]=true;
    height[cur]=h;
    first[cur]=euler.size();
    euler.push_back(cur);
    for(int i=0;i<adj[cur].size();i++){
        if(!visited[adj[cur][i]]){
            dfs(adj[cur][i],h+1);
            euler.push_back(cur);
        }
    }
}

void hlca(int root=1){
    height.resize(n);
    first.resize(n);
    euler.reserve(2*n);
    visited.assign(n,false);
    dfs(root,0);
    int m=euler.size();
    segtree.resize(4*m);
    sbuild(1,0,m-1);
}

int lca(int u, int v){
    int left=first[u]; int right=first[v];
    if(left>right) swap(left, right);
    return query(1,0,euler.size()-1,left,right);
}

int dist(int u, int v){
    return ( height[u] + height[v] - 2*height[lca(u,v)] );
}

int main()
{
    ifstream cin("tourists-0000.in");
    cin>>n;
    for(int i=0;i<n-1;i++){
        int a, b; cin>>a>>b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    for(int i=1;i<=n;i++){
        for(int j=i+i;j<=n;j+=i){
            pos.push_back(make_pair(i,j));
        }
    }
    hlca();
    int ans=0;
    for(int i=0;i<pos.size();i++){
        //cout<<pos[i].first<<" "<<pos[i].second<<" "<<dist(pos[i].first,pos[i].second)+1<<"\n";
        ans+=(dist(pos[i].first,pos[i].second)+1);
    }
    cout<<ans;
    return 0;
}
