#include <bits/stdc++.h>

using namespace std;

const int MAXN=26;

vector<int> adj[MAXN];
vector<int> ideg(MAXN,0);
vector<int> lexorder;
set<int>minheap;
int n=26;

void toposort(){
    for(int i=0;i<n;i++){
        for(int j=0;j<adj[i].size();j++){
            ideg[adj[i][j]]++;
        }
    }
    for(int i=0;i<n;i++){
        if(ideg[i]==0) minheap.insert(i);
    }
    int a;
    while(!minheap.empty()){
        a= *minheap.begin();
        minheap.erase(minheap.begin());
        lexorder.push_back(a);
        for(int i=0;i<adj[a].size();i++){
            ideg[adj[a][i]]--;
            if(ideg[adj[a][i]]==0) minheap.insert(adj[a][i]);
        }
    }

}


int main()
{
    vector<string>v;
    int t; cin>>t;
    for(int i=0;i<t;i++){
        string s; cin>>s; v.push_back(s);
    }
    for(int i=0;i<t;i++){
        for(int j=i+1;j<t;j++){
            string s1=v[i]; string s2=v[j];
            for(int k=0;k<s1.size();k++){
                if(k>=s2.size()){
                    cout<<"Impossible";
                    return 0;
                }
                else if(s1[k]!=s2[k]){
                    adj[s1[k]-'a'].push_back(s2[k]-'a');
                    break;
                }
            }
        }
    }
    toposort();
    if(lexorder.size()!=26){
        cout<<"Impossible";
        return 0;
    }
    for(int i=0;i<lexorder.size();i++){
        cout<<(char)(lexorder[i]+'a');
    }

    return 0;
}
