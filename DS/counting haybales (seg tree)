//link: http://usaco.org/index.php?page=viewproblem2&cpid=578

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

struct segtree{
    vector<ll>tree;
    vector<ll>sum;
    vector<ll>lazy;
    vector<ll>lo;
    vector<ll>hi;
    segtree(ll sz){
        tree.resize(4*sz+1);
        lazy.resize(4*sz+1);
        lo.resize(4*sz+1);
        hi.resize(4*sz+1);
        sum.resize(4*sz+1);
        init(1,0,sz-1);
    }
    void init(ll node, ll a, ll b){
        lo[node]=a; hi[node]=b;
        if(a==b) return;
        int split=(a+b)/2;
        init(2*node,a,split);
        init(2*node+1,split+1,b);
    }
    void update(ll a, ll b, ll val){
        hupdate(1,a,b,val);
    }
    ll minquery(ll a, ll b){
        return hminquery(1,a,b);
    }
    ll sumquery(ll a, ll b){
        return hsumquery(1,a,b);
    }
    void prop(ll node){
        lazy[2*node]+=lazy[node];
        lazy[2*node+1]+=lazy[node];
        lazy[node]=0;
    }
    void change(ll node){
        tree[node]=min(tree[2*node+1] + lazy[2*node+1], tree[2*node] + lazy[2*node]);
        sum[node]=sum[2*node+1]+(hi[2*node+1]-lo[2*node+1]+1)*lazy[2*node+1] + sum[2*node]+(hi[2*node]-lo[2*node]+1)*lazy[2*node];
    }
    void hupdate(ll node, ll a, ll b, ll val){
        if(b<lo[node] || hi[node]<a) return;
        if(a<=lo[node] && hi[node]<=b){
            lazy[node]+=val;
            return;
        }
        prop(node);
        hupdate(2*node,a,b,val);
        hupdate(2*node+1,a,b,val);
        change(node);
    }
    ll hminquery(ll node, ll a, ll b){
        if(b<lo[node] || hi[node]<a) return LONG_MAX;
        if(a<=lo[node] && hi[node]<=b){
            return tree[node]+lazy[node];
        }
        prop(node);
        ll left=hminquery(2*node, a, b);
        ll right=hminquery(2*node+1,a,b);
        change(node);
        return min(left, right);
    }
    ll hsumquery(ll node, ll a, ll b){
        if(b<lo[node] || hi[node]<a) return 0;
        if(a<=lo[node] && hi[node]<=b){
            return sum[node]+(hi[node]-lo[node]+1)*lazy[node];
        }
        prop(node);
        ll left=hsumquery(2*node, a, b);
        ll right=hsumquery(2*node+1,a,b);
        change(node);
        return left+right;
    }

};

int main()
{
    ifstream cin("haybales.in");
    ofstream cout("haybales.out");
    ll n, q; cin>>n>>q;
    segtree seg=segtree(n);
    for(ll i=0;i<n;i++){
        ll t; cin>>t;
        seg.update(i,i,t);
    }
    char type;
    for(ll i=0;i<q;i++){
        cin>>type;
        if(type=='M'){
            ll a, b; cin>>a>>b;
            cout<<seg.minquery(a-1,b-1)<<"\n";
        }
        else if(type=='P'){
            ll a,b,c; cin>>a>>b>>c;
            seg.update(a-1,b-1,c);
        }
        else if(type=='S'){
            ll a, b; cin>>a>>b;
            cout<<seg.sumquery(a-1,b-1)<<"\n";
        }

    }


    return 0;
}
